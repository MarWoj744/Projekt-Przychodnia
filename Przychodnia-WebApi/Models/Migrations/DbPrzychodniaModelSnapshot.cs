// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(DbPrzychodnia))]
    partial class DbPrzychodniaModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Badanie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cennik")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Badania");
                });

            modelBuilder.Entity("Models.Harmonogram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataOd")
                        .HasColumnType("datetime2");

                    b.Property<int>("LekarzId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId", "DataOd", "DataDo")
                        .IsUnique()
                        .HasDatabaseName("IX_Harmonogram_Lekarz_Range");

                    b.ToTable("Harmonogramy", t =>
                        {
                            t.HasCheckConstraint("CK_Harmonogram_DataZakres", "[DataDo] > [DataOd]");
                        });
                });

            modelBuilder.Entity("Models.Osoba", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Haslo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rola")
                        .HasColumnType("int");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Osoby");

                    b.HasDiscriminator<int>("Rola");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Models.Wizyta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("LekarzId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PacjentId")
                        .HasColumnType("int");

                    b.Property<int>("RecepcjonistkaId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LekarzId");

                    b.HasIndex("PacjentId");

                    b.HasIndex("RecepcjonistkaId");

                    b.ToTable("Wizyty");
                });

            modelBuilder.Entity("Models.WykonaneBadania", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BadanieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("WizytaId")
                        .HasColumnType("int");

                    b.Property<string>("Wyniki")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Zalecenia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BadanieId");

                    b.HasIndex("WizytaId");

                    b.ToTable("WykonaneBadania");
                });

            modelBuilder.Entity("Models.Lekarz", b =>
                {
                    b.HasBaseType("Models.Osoba");

                    b.Property<string>("Specjalizacja")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Models.Pacjent", b =>
                {
                    b.HasBaseType("Models.Osoba");

                    b.Property<string>("PESEL")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("PESEL")
                        .IsUnique()
                        .HasFilter("[PESEL] IS NOT NULL");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Models.Recepcjonistka", b =>
                {
                    b.HasBaseType("Models.Osoba");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Models.Harmonogram", b =>
                {
                    b.HasOne("Models.Lekarz", "Lekarz")
                        .WithMany("Harmonogramy")
                        .HasForeignKey("LekarzId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lekarz");
                });

            modelBuilder.Entity("Models.Wizyta", b =>
                {
                    b.HasOne("Models.Lekarz", "Lekarz")
                        .WithMany("Wizyty")
                        .HasForeignKey("LekarzId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Pacjent", "Pacjent")
                        .WithMany("Wizyty")
                        .HasForeignKey("PacjentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Recepcjonistka", "Recepcjonistka")
                        .WithMany("WizytyZarejestrowane")
                        .HasForeignKey("RecepcjonistkaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lekarz");

                    b.Navigation("Pacjent");

                    b.Navigation("Recepcjonistka");
                });

            modelBuilder.Entity("Models.WykonaneBadania", b =>
                {
                    b.HasOne("Models.Badanie", "Badanie")
                        .WithMany("Wykonane")
                        .HasForeignKey("BadanieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Models.Wizyta", "Wizyta")
                        .WithMany("Badania")
                        .HasForeignKey("WizytaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badanie");

                    b.Navigation("Wizyta");
                });

            modelBuilder.Entity("Models.Badanie", b =>
                {
                    b.Navigation("Wykonane");
                });

            modelBuilder.Entity("Models.Wizyta", b =>
                {
                    b.Navigation("Badania");
                });

            modelBuilder.Entity("Models.Lekarz", b =>
                {
                    b.Navigation("Harmonogramy");

                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("Models.Pacjent", b =>
                {
                    b.Navigation("Wizyty");
                });

            modelBuilder.Entity("Models.Recepcjonistka", b =>
                {
                    b.Navigation("WizytyZarejestrowane");
                });
#pragma warning restore 612, 618
        }
    }
}
